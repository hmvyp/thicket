
thicket_ignore.txt
--------------------------------------------------------------------

Maybe introduce thicket_ignore.txt files containing relative paths where Thicket
must stop diving deeper while analyzing the file tree.
That may improve performance and (more important) eliminate phony errors
caused by exotic filesystem artefacts like sockets, devices, etc.



thicket_artefacts.txt
--------------------------------------------------------------------
Generate a file (alongside a mountpoint) describing generated stuff.
This file may help:
1) to delete artefacts more safely and accurately (if set of mountpoints changed)
2) to detect changes made by user in the artifact content (and warn him before artefact cleaning)




Things expected in version 2:
--------------------------------------------------------------------


Syntax extensions in mountpoint files
--------------------------------------------------------------------

# "merge" command

# (equivalent to old path syntax):
merge: path/to/target .

# additional capability: merge to some internal mountpoint inside the generated artefact:
merge: path/to/target mount/here


# "add" command

add: path/to/target filename mount/here

# the above is equivalent to:
merge: path/to/target/filename mount/here/filename)

# filter can be used instead of filename:
add: path/to/target **/*.c   mount/here

# the command below is equivalent to simple merge:
add: path/to/target **/* .

so perhaps "merge" command is redundant (can be replaced by "add" with wilcard pattern)


# environment variable can be used as ${var_name} e.g.

add: path/to/${TARGET_OS_NAME} *.c os_specific




template mountpoint descriptor
--------------------------------------------------------------------
# ${cmpname}.thicket_template.txt
# template allows to generate a set of mountpoint artefacts matching the template description

add: path/to/cmp/sources/${cmpname}.h
add: path/to/cmp/sources/${cmpname} {cmpname}
add? path/to/optional/sources/${cmpname}.c

# (? means optional)
# template mountpoint descriptor generates a set of all mountpoints matching the template.
# Mountpoint name is derived while matching path specifiers containing the name variable.
# Failure to match any non-optional path specifier (add or merge)
# is treated as failure (the corresponding candidate template instantiation is rejected)
# Any non-template mountpoint description file has priority over template.


