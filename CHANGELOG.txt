What is new in release 2.2.02
═════════════════════════════

► Imprint files are now created for each mountpoint...

... instead of a single imprint file located in the materialization scope (see notes on version 2.2.01).
Individual imprints provide correctness of the cleanup procedure when Thicket is running with different scopes alternately.




What is new in release 2.2.01
═════════════════════════════

► New cleaning method («imprint»)

New cleaning algorithm is implemented to erase artifacts remaining from previous Thicket invocation.

The new algorithm uses a special "imprint" file that contains information about all previous artifacts.
The file has name .thicket_imprint and is located just under the materialization scope.

The old cleaning algorithm deletes artifacts by using the only presence of mountpoint description files. That approach usually works, but sometimes may be incorrect and even dangerous, especially under virtualization environment (if Thicket runs under the host and guest alternatively and if the guest OS does not properly recognize host's symlinks).

The second possible pitfall with the old cleaning method is to add accidentally something important to the «materialized» directory: such an addition will disappear on the next Thicket invocation without any warning.

Due to the above reasons, the new (imprint) cleaning method is set as default.

Before upgrading Thicket it is recommended to clean all artifacts using the old version (with -c command line option).
Or clean using new Thicket version with options

 -c -em=mounts

i.e. by specifying the old cleaning method explicitly.

Otherwise, for the first time the new (imprint) cleaning method does nothing as the imprint file is initially absent.

To specify cleaning method explicitly, use new command line option

-em=mounts   — for the old method
-em=imprint  — for the new method

(-em stands for «erase method»)




What is new in release 2.1.02
═════════════════════════════

► Shallow universal filter 

Shallow universal filter /* (or * if it appears without path prefix) can be used in mountpoint description records.
For example:

add: take/from/here  somedir/*  put/here/somedir_with_its_top_level_files

or

add: take/from/here/somedir  *  put/here/top_level_files_from_somedir

In contrast with universal filter **/*, shallow filter * picks only top-level files in somedir and does not recurse deeper.

The behavior is inline with glob patterns semantics and I hope other glob-like patterns will be available soon as Thicket filters.

Let us note, however, that shallow filter (or any other imaginable filter that can be implemented in the future, except for the universal filter **/* ) prevents directories from being symlinked since the filter really filters the directory content. Particularly, while materializing, shallow filter always creates a real directory with symlinks to regular files inside.

Such "fine grain" structures are error prone since they increase a possiblility to add something important into a directory that is actually a Thicket artifact (which will be deleted on the next Thicket invocation). 
So use non-trivial filters with care and only if they are really necessary.




What is new in release 2.1.01
═════════════════════════════

► Variables.

Thicket now can accept variables passed via command line option -var
(the option may be repeated in the command line multiple times), for example:

-var=VAR1:value1 -var=VAR2:value2 

A variable can be used in mountpoint description files (in paths) as

${VARIABLE_NAME}

for example:

add: my/sources/os_specific/${TARGET_OS} **/*

(assuming the variable TARGET_OS is passed through the command line)


► Escape characters

Paths and file names in mountpoint description files can now contain spaces. Since space characters have special meaning in mountpoint syntax (separate "from", "what" and "where to put" parts of mountpoint record) they shall be escaped if encountered inside a path:

\s — stands for space
\t — stands for tab
\\ — stands for backslash

However, using backslash in paths is not recommended since it clashes with Windows path separator (let's remind Thicket uses forward slash as unified separator on all platforms)

Note, Thicket does not support quoted strings, the quotation mark is treated as a regular character. Do not enclose a path in quotation marks even if the path contains escaped spaces.




What is new in releases 2.X.XX (compared to 1.X.XX)
═══════════════════════════════════════════════════

► New mountpoint record syntax

New syntax allows to add individual files or directories from any source and (optionally)
mount them into a specific subdirectory of the mountpoint (not necessarily into mounpoint root)

With the old syntax all the above tasks are also doable, but quite tedious (require creation of intermediate mountpoints).

The new syntax has 2 forms differ only by a separator:

add: <from> <what> <where_to_put>

or

add? <from> <what> <where_to_put> (optional record, does not report error if some paths fail to resolve)

<from> is a target path (e.g. ../path/to/target) from which some things shall be merged into the mountpoint

<what> is a relative path inside <from> (or a wildcard symbol **/*) and describes these "things"

<where_to_put> is a relative path inside the mountpoint where the "things" shall be placed. If omitted, top level directory of the mountpoint is expected (i.e. the mountpoint itself).

All four components of the new syntax are separated by spaces.

Old syntax (target path only) is also supported, so the new version is almost fully compatible except for weird target paths starting with add: or add?. If it happens (I hope, never) the old record shall be converted to the new syntax.

For example, an old syntax record

../path/to/target

has the corresponding new equivalent:

add: ../path/to/target **/*


To add a single file somefile from ../path/to/target into mountpoint subdirectory subdir:

add: ../path/to/target somefile subdir

(the file will retain its original name)

